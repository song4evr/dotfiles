#=====  FUNCTION  ===============================================================
#          NAME:  controlWebserver
#   DESCRIPTION:  Obtains and stores the public key for a remote SSH node
#    PARAMETERS:  Target host to obtain keys for
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function controlWebserver
{
    trap '[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    if [ ${#} -eq 0 ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${METHOD_NAME} - Control a Apache server instance";
        writeLogEntry "STDERR" "Usage: ${METHOD_NAME} [ control type ] [ server name ] [ sudo user ]
                 -> The control command to execute, such as start, stop or restart
                 -> The target server, such as DWSTEMPLATE0001US.
                 -> The user to execute the sudo rule as";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ ! -z "${CONTROL_OPTION}" ] && unset -v CONTROL_OPTION;
        [ ! -z "${CONTROL_TARGET}" ] && unset -v CONTROL_TARGET;
        [ ! -z "${CONTROL_USER}" ] && unset -v CONTROL_USER;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        return ${RETURN_CODE};
    fi

    typeset -l CONTROL_OPTION="${1}";
    typeset CONTROL_TARGET="${2}";
    typeset -l CONTROL_USER="${3}";

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_OPTION -> ${CONTROL_OPTION}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_TARGET -> ${CONTROL_TARGET}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_USER -> ${CONTROL_USER}";

    case ${CONTROL_OPTION} in
        start)
            sudo -u ${CONTROL_USER} /opt/home/${CONTROL_USER}/bin/apachectl -D ${CONTROL_TARGET} -d /opt/Apache/httpd/current -k start;
            typeset -i RET_CODE=${?};
            ;;
        stop)
            sudo -u ${CONTROL_USER} /opt/home/${CONTROL_USER}/bin/apachectl -D ${CONTROL_TARGET} -d /opt/Apache/httpd/current -k stop;
            typeset -i RET_CODE=${?};
            ;;
        restart)
            controlWebserver stop ${CONTROL_TARGET} ${CONTROL_USER};
            typeset -i RET_CODE=${?};

            sleep 10;

            controlWebserver start ${CONTROL_TARGET} ${CONTROL_USER};
            typeset -i RET_CODE=${?};
            ;;
        *)
            RETURN_CODE=3;

            writeLogEntry "STDERR" "controlWebserver - Control a Apache server instance";
            writeLogEntry "STDERR" "Usage: controlWebserver [ control type ] [ server name ] [ sudo user ]
                     -> The control command to execute, such as start, stop or restart
                     -> The target server, such as DWSTEMPLATE0001US.
                     -> The user to execute the sudo rule as";

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

            [ ! -z "${CONTROL_OPTION}" ] && unset -v CONTROL_OPTION;
            [ ! -z "${CONTROL_TARGET}" ] && unset -v CONTROL_TARGET;
            [ ! -z "${CONTROL_USER}" ] && unset -v CONTROL_USER;
            [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

            [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
            [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

            return ${RETURN_CODE};
            ;;
    esac

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";

    [ -z "${RET_CODE}" ] && RETURN_CODE=1 || RETURN_CODE=${RET_CODE};

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ ! -z "${CONTROL_OPTION}" ] && unset -v CONTROL_OPTION;
    [ ! -z "${CONTROL_TARGET}" ] && unset -v CONTROL_TARGET;
    [ ! -z "${CONTROL_USER}" ] && unset -v CONTROL_USER;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    return ${RETURN_CODE};
}

#=====  FUNCTION  ===============================================================
#          NAME:  controlApplicationServer
#   DESCRIPTION:  Obtains and stores the public key for a remote SSH node
#    PARAMETERS:  Target host to obtain keys for
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function controlApplicationServer
{
    trap '[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    if [ ${#} -eq 0 ]
    then
        typeset -i RETURN_CODE=3;

        writeLogEntry "STDERR" "${METHOD_NAME} - Control a Catalina server instance";
        writeLogEntry "STDERR" "Usage: ${METHOD_NAME} [ server type ] [ control type ] [ profile name ] [ server name ] [ sudo user ]
                -> The type of server to control.
                    -> Currently valid values are:
                        -> WebSphere
                        -> Tomcat/Catalina
                -> The control command to execute, such as start, stop or restart
                -> The target profile to load
                -> The target server, such as DASTEMPLATE0001US.
                -> The user to execute the sudo rule as";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${CONTROL_SERVER}" ] && unset -v CONTROL_SERVER;
        [ ! -z "${CONTROL_OPTION}" ] && unset -v CONTROL_OPTION;
        [ ! -z "${CONTROL_TARGET}" ] && unset -v CONTROL_TARGET;
        [ ! -z "${CONTROL_USER}" ] && unset -v CONTROL_USER;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        return ${RETURN_CODE};
    fi

    typeset -l CONTROL_SERVER="${1}";
    typeset -l CONTROL_OPTION="${2}";
    typeset -l CONTROL_TARGET="${3}";
    typeset -l CONTROL_USER="${4}";

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_SERVER -> ${CONTROL_SERVER}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_OPTION -> ${CONTROL_OPTION}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_TARGET -> ${CONTROL_TARGET}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONTROL_USER -> ${CONTROL_USER}";

    case "${CONTROL_OPTION}" in
        [Ss][Tt][Aa][Rr][Tt])
            case "${CONTROL_SERVER}" in
                [Ww][Ee][Bb][Ss][Pp][Hh][Ee][Rr][Ee]|[Ww][Aa][Ss])
                    [ -z "{CONTROL_USER}" ] && ${WAS_HOME}/AppServer/profiles/${CONTROL_PROFILE}/bin/startServer.sh ${CONTROL_TARGET};
                    [ ! -z "{CONTROL_USER}" ] && sudo -u ${CONTROL_USER} ${WAS_HOME}/AppServer/profiles/${CONTROL_PROFILE}/bin/startServer.sh ${CONTROL_TARGET};
                    typeset -i RET_CODE=${?};

                    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";
                    ;;
                [Tt][Oo][Mm][Cc][Aa][Tt]|[Cc][Aa][Tt][Aa][Ll][Ii][Nn][Aa]|[Aa][Pp][Aa][Cc][Hh][Ee])
                    [ -z "{CONTROL_USER}" ] && /opt/home/${CONTROL_USER}/bin/startup.sh ${CONTROL_TARGET};
                    [ ! -z "{CONTROL_USER}" ] && sudo -u ${CONTROL_USER} /opt/home/${CONTROL_USER}/bin/startup.sh ${CONTROL_TARGET};
                    typeset -i RET_CODE=${?};

                    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";
                    ;;
                *)
            esac
            ;;
        [Ss][Tt][Oo][Pp])
            case "${CONTROL_SERVER}" in
                [Ww][Ee][Bb][Ss][Pp][Hh][Ee][Rr][Ee]|[Ww][Aa][Ss])
                    [ -z "{CONTROL_USER}" ] && ${WAS_HOME}/AppServer/profiles/${CONTROL_PROFILE}/bin/stopServer.sh ${CONTROL_TARGET};
                    [ ! -z "{CONTROL_USER}" ] && sudo -u ${CONTROL_USER} ${WAS_HOME}/AppServer/profiles/${CONTROL_PROFILE}/bin/stopServer.sh ${CONTROL_TARGET};
                    typeset -i RET_CODE=${?};

                    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";
                    ;;
                [Tt][Oo][Mm][Cc][Aa][Tt]|[Cc][Aa][Tt][Aa][Ll][Ii][Nn][Aa]|[Aa][Pp][Aa][Cc][Hh][Ee])
                    [ -z "{CONTROL_USER}" ] && /opt/home/${CONTROL_USER}/bin/shutdown.sh ${CONTROL_TARGET};
                    [ ! -z "{CONTROL_USER}" ] && sudo -u ${CONTROL_USER} /opt/home/${CONTROL_USER}/bin/shutdown.sh ${CONTROL_TARGET};
                    typeset -i RET_CODE=${?};

                    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";
                    ;;
                *)
            esac
            ;;
        [Rr][Ee][Ss][Tt][Aa][Rr][Tt])
            controlApplicationServer "${CONTROL_SERVER}" stop "${CONTROL_TARGET}" "${CONTROL_USER}";
            typeset -i RET_CODE=${?};

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RET_CODE -> ${RET_CODE}";

            if [ ! -z "${RET_CODE}" ] || [ ${RET_CODE} -eq 0 ]
            then
                sleep 15;

                controlApplicationServer "${CONTROL_SERVER}" start "${CONTROL_TARGET}" "${CONTROL_USER}";
                typeset -i RET_CODE=${?};
            fi
            ;;
        *)
    esac

    if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
    then
        typeset RETURN_CODE=1;

        writeLogEntry "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        writeLogEntry "STDERR" "An error occurred processing the control request for the given application server. Please review server logs for more information.";
    fi

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${CONTROL_SERVER}" ] && unset -v CONTROL_SERVER;
    [ ! -z "${CONTROL_OPTION}" ] && unset -v CONTROL_OPTION;
    [ ! -z "${CONTROL_TARGET}" ] && unset -v CONTROL_TARGET;
    [ ! -z "${CONTROL_USER}" ] && unset -v CONTROL_USER;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    return ${RETURN_CODE};
}
