## load logging !
[ -f "${HOME}/.etc/logging.properties" ] && . "${HOME}/.etc/logging.properties";
[ ! -z "${LOG_ROOT}" ] && mkdir -p "${LOG_ROOT}";
[ ! -z "${ARCHIVE_LOG_ROOT}" ] && mkdir -p "${ARCHIVE_LOG_ROOT}";

#=====  FUNCTION  =============================================================
#          NAME:  writeLogEntry
#   DESCRIPTION:  Cleans up the archived log directory
#    PARAMETERS:  Archive Directory, Logfile Name, Retention Time
#       RETURNS:  0 regardless of result.
#==============================================================================
function writeLogEntry
{
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    if [ ${#} -eq 0 ]
    then
        typeset RETURN_CODE=3;

        printf "writeLogEntry - Write a log message to stdout/err or to a logfile\n" >&2;
        printf "Usage: writeLogEntry [ <level> ] [ <method> ] [ <class/script> ] [ <line> ] [ <message> ]
                 -> The level to write for. Supported levels:
                     STDOUT
                     STDERR
                     PERFORMANCE
                     FATAL
                     ERROR
                     INFO
                     WARN
                     AUDIT
                     DEBUG
                 -> The method calling the logger
                 -> The class/script calling the logger
                 -> The line number making the call
                 -> The message to be printed.\n" >&2;

        return ${RETURN_CODE};
    fi

    typeset LOG_DATE=$(date +"${TIMESTAMP_OPTS}");
    typeset LOG_LEVEL="${1}";
    typeset LOG_METHOD="${2}";
    typeset LOG_SOURCE="${3}";
    typeset LOG_LINE="${4}";
    typeset LOG_MESSAGE="${5}";

    case "${LOG_LEVEL}" in
        [Ss][Tt][Dd][Oo][Uu][Tt])
            [ ${#} -eq 2 ] && printf "%s\n" "${LOG_METHOD}" >&1 || printf "%s\n" "${LOG_MESSAGE}" >&1;

            return ${RETURN_CODE};
            ;;
        [Ss][Tt][Dd][Ee][Rr][Rr])
            [ ${#} -eq 2 ] && printf "%s\n" "${LOG_METHOD}" >&2 || printf "%s\n" "${LOG_MESSAGE}" >&2;

            return ${RETURN_CODE};
            ;;
        [Pp][Ee][Rr][Ff][Oo][Rr][Mm][Aa][Nn][Cc][Ee]|[Pp])
            typeset LOG_FILE="${PERF_LOG_FILE}";
            ;;
        [Ff][Aa][Tt][Aa][Ll]|[Ff])
            typeset LOG_FILE="${FATAL_LOG_FILE}";
            ;;
        [Ee][Rr][Rr][Oo][Rr]|[Ee])
            typeset LOG_FILE="${ERROR_LOG_FILE}";
            ;;
        [Ww][Aa][Rr][Nn]|[Ww])
            typeset LOG_FILE="${WARN_LOG_FILE}";
            ;;
        [Ii][Nn][Ff][Oo]|[Ii])
            typeset LOG_FILE="${INFO_LOG_FILE}";
            ;;
        [Aa][Uu][Dd][Ii][Tt]|[Aa])
            typeset LOG_FILE="${AUDIT_LOG_FILE}";
            ;;
        [Dd][Ee][Bb][Uu][Gg]|[Dd])
            typeset LOG_FILE="${DEBUG_LOG_FILE}";
            ;;
        [Mm][Oo][Nn][Ii][Tt][Oo][Rr]|[Mm])
            typeset LOG_FILE="${MONITOR_LOG_FILE}";
            ;;
        *)
            typeset LOG_FILE="${INFO_LOG_FILE}";
            ;;
    esac

    printf "${CONVERSION_PATTERN}\n" "${LOG_DATE}" "${PPID}" "${LOG_FILE}" "${LOG_LEVEL}" "${LOG_SOURCE}" "${LOG_LINE}" "${LOG_METHOD}" "${LOG_MESSAGE}" >> "${LOG_ROOT}/${LOG_FILE}";

    [ ! -z "${LOG_DATE}" ] && unset -v LOG_DATE;
    [ ! -z "${LOG_LEVEL}" ] && unset -v LOG_LEVEL;
    [ ! -z "${LOG_METHOD}" ] && unset -v LOG_METHOD;
    [ ! -z "${LOG_SOURCE}" ] && unset -v LOG_SOURCE;
    [ ! -z "${LOG_LINE}" ] && unset -v LOG_LINE;
    [ ! -z "${LOG_MESSAGE}" ] && unset -v LOG_MESSAGE;
    [ ! -z "${LOG_FILE}" ] && unset -v LOG_FILE;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    return ${RETURN_CODE};
}

