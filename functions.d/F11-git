#=====  FUNCTION  =============================================================
#          NAME:  git
#   DESCRIPTION:  Wrapper around git because fuck
#    PARAMETERS:  None required, all params are passed to git as-is
#       RETURNS:  Whatever git returns
#==============================================================================
function git
{
    trap '[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    typeset GIT_COMMAND="${1}"; shift;
    typeset GIT_OPTIONS="${@}";

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "GIT_COMMAND -> ${GIT_COMMAND}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "GIT_OPTIONS -> ${GIT_OPTIONS}";

    case "${GIT_COMMAND}" in
        [Pp][Uu][Ss][Hh])
            ## hack around git not understanding or not caring about a hack for ssh =D
            typeset TEMP_SSH_CONFIG="$(mktemp)";
            typeset TEMP_ARCHIVE_FILE="$(mktemp)";

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "TEMP_SSH_CONFIG -> ${TEMP_SSH_CONFIG}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "TEMP_ARCHIVE_FILE -> ${TEMP_ARCHIVE_FILE}";

            if [ ! -f "${TEMP_SSH_CONFIG}" ]
            then
                typeset RETURN_CODE=1;

                writeLogEntry "ERROR" "Failed to create a temporary SSH configuration file. Please try again.";
                writeLogEntry "STDERR" "Failed to create a temporary SSH configuration file. Please try again.";

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ ! -z "${TEMP_SSH_CONFIG}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_SSH_CONFIG}";
                [ ! -z "${TEMP_ARCHIVE_FILE}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_ARCHIVE_FILE}";

                [ ! -z "${GIT_COMMAND}" ] && unset -v GIT_COMMAND;
                [ ! -z "${GIT_OPTIONS}" ] && unset -v GIT_OPTIONS;
                [ ! -z "${TEMP_SSH_CONFIG}" ] && unset -v TEMP_SSH_CONFIG;
                [ ! -z "${TEMP_ARCHIVE_FILE}" ] && unset -v TEMP_ARCHIVE_FILE;

                [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/bin/env date +"%s");
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

                return ${RETURN_CODE};
            fi

            ## print in the info
            printf "Host %s\n" "github.com" > "${TEMP_SSH_CONFIG}";
            printf "    HostName                    = %s\n" "github.com" >> "${TEMP_SSH_CONFIG}";
            printf "    User                        = %s\n" "git" >> "${TEMP_SSH_CONFIG}";
            printf "    IdentitiesOnly              = %s\n" "yes" >> "${TEMP_SSH_CONFIG}";
            printf "    IdentityFile                = %s\n" "~/.ssh/id_cws-khuntly" >> "${TEMP_SSH_CONFIG}";

            ## back up if necessary
            [ -s "${HOME}/.ssh/config" ] && /bin/env cp -p "${HOME}/.ssh/config" "${TEMP_ARCHIVE_FILE}";

            ## pipe it in
            /bin/env cat "${TEMP_SSH_CONFIG}" >| "${HOME}/.ssh/config";

            ## confirm...
            if [ $(grep -c "github.com" "${HOME}/.ssh/config") -eq 0 ]
            then
                typeset RETURN_CODE=1;

                writeLogEntry "ERROR" "Failed to properly configure SSH options for GitHub. Please try again.";
                writeLogEntry "STDERR" "Failed to properly configure SSH options for GitHub. Please try again.";

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/bin/env date +"%s");
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
                [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

                [ ! -z "${TEMP_SSH_CONFIG}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_SSH_CONFIG}";
                [ ! -z "${TEMP_ARCHIVE_FILE}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_ARCHIVE_FILE}";

                [ ! -z "${GIT_COMMAND}" ] && unset -v GIT_COMMAND;
                [ ! -z "${GIT_OPTIONS}" ] && unset -v GIT_OPTIONS;
                [ ! -z "${TEMP_SSH_CONFIG}" ] && unset -v TEMP_SSH_CONFIG;
                [ ! -z "${TEMP_ARCHIVE_FILE}" ] && unset -v TEMP_ARCHIVE_FILE;
                [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;

                return ${RETURN_CODE};
            fi
            ;;
    esac

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RUN COMMAND -> /bin/env git \"${GIT_COMMAND}\" \"${GIT_OPTIONS}\"";

    [ -z "${GIT_OPTIONS}" ] && /bin/env git ${GIT_COMMAND} || /bin/env git ${GIT_COMMAND} ${GIT_OPTIONS};
    wait;

    typeset -i RETURN_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";


    [ -s "${TEMP_ARCHIVE_FILE}" ] && /bin/env cp -p "${TEMP_ARCHIVE_FILE}" "${HOME}/.ssh/config";

    [ ! -z "${TEMP_SSH_CONFIG}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_SSH_CONFIG}";
    [ ! -z "${TEMP_ARCHIVE_FILE}" ] && [ -f "${TEMP_SSH_CONFIG}" ] && rm -f "${TEMP_ARCHIVE_FILE}";

    [ ! -z "${GIT_COMMAND}" ] && unset -v GIT_COMMAND;
    [ ! -z "${GIT_OPTIONS}" ] && unset -v GIT_OPTIONS;
    [ ! -z "${TEMP_SSH_CONFIG}" ] && unset -v TEMP_SSH_CONFIG;
    [ ! -z "${TEMP_ARCHIVE_FILE}" ] && unset -v TEMP_ARCHIVE_FILE;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;

    return ${RETURN_CODE};
}
