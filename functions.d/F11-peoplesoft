#=====  FUNCTION  =============================================================
#          NAME:  psdmtx
#   DESCRIPTION:  Builds an SSH configuration file
#    PARAMETERS:  Target host to configure, username for access
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function psdmtx
{
    trap '[ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}"; \\
        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ -z "$(type mktemp 2>/dev/null)" ] && . ${HOME}/.functions.d/F04-misc;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    if [ ${#} -eq 0 ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} - Run a datamover script via PeopleTools psdmtx"
        writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Usage: ${METHOD_NAME} [ database type ] [ import file ]
                -> The database type to utilize.
                    One of the following:
                        DB2UNIX
                        ORACLE
                -> The full path to the import file to utilize.";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_COßDE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

        [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

        [ ! -z "${TEMPFILE}" ] && unset TEMPFILE;
        [ ! -z "${DATABASE_TYPE}" ] && unset DATABASE_TYPE;
        [ ! -z "${INPUT_FILE}" ] && unset INPUT_FILE;
        [ ! -z "${SYSTEM_FQDN}" ] && unset SYSTEM_FQDN;
        [ ! -z "${DATABASE_NAME}" ] && unset DATABASE_NAME;
        [ ! -z "${USER_LOGIN_NAME}" ] && unset USER_LOGIN_NAME;
        [ ! -z "${USER_LOGIN_PASS}" ] && unset USER_LOGIN_PASS;
        [ ! -z "${CONNECT_LOGIN_NAME}" ] && unset CONNECT_LOGIN_NAME;
        [ ! -z "${CONNECT_LOGIN_PASS}" ] && unset CONNECT_LOGIN_PASS;
        [ ! -z "${EXEC_BASE_DIR}" ] && unset EXEC_BASE_DIR;
        [ ! -z "${PSDMTX_STDOUT_LOG}" ] && unset PSDMTX_STDOUT_LOG;
        [ ! -z "${PSDMTX_STDERR_LOG}" ] && unset PSDMTX_STDERR_LOG;
        [ ! -z "${VERIFY_ENTRY}" ] && unset VERIFY_ENTRY;
        [ ! -z "${VARIABLE_SET}" ] && unset VARIABLE_SET;
        [ ! -z "${METHOD_NAME}" ] && unset METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    typeset TEMPFILE="$(mktemp)";
    typeset DATABASE_TYPE="${1}";
    typeset INPUT_FILE="${2}";
    typeset SYSTEM_FQDN="$(/usr/bin/env grep "${HOSTNAME}" ${NMON}/scripts/nmonbatch/servers_list.txt | cut -d "|" -f 2 | tr '[A-Z]' '[a-z]')";
    typeset DATABASE_NAME="$(/usr/bin/env echo "${PS_HOME}" | /usr/bin/env awk -F "/" '{print $NF}')";
    typeset USER_LOGIN_NAME="$(/usr/bin/env java -cp ".;${HOME}/.lib/passwordRepository-1.3.jar" com.hsbc.gbm.ptarch.security.utils.PasswordRepository -show psstat | awk '{print $1}')";
    typeset USER_LOGIN_PASS="$(/usr/bin/env java -cp ".;${HOME}/.lib/passwordRepository-1.3.jar" com.hsbc.gbm.ptarch.security.utils.PasswordRepository -show psstat | awk '{print $2}')";
    typeset CONNECT_LOGIN_NAME="$(/usr/bin/env java -cp ".;${HOME}/.lib/passwordRepository-1.3.jar" com.hsbc.gbm.ptarch.security.utils.PasswordRepository -show people@${DATABASE_NAME} | awk '{print $1}')";
    typeset CONNECT_LOGIN_PASS="$(/usr/bin/env java -cp ".;${HOME}/.lib/passwordRepository-1.3.jar" com.hsbc.gbm.ptarch.security.utils.PasswordRepository -show people@${DATABASE_NAME} | awk '{print $2}')";
    typeset EXEC_BASE_DIR="$(/usr/bin/env dirname "${INPUT_FILE}")";
    typeset PSDMTX_STDOUT_LOG="${EXEC_BASE_DIR}$(/usr/bin/env echo "${INPUT_FILE}" | cut -d "." -f 1).out";
    typeset PSDMTX_STDERR_LOG="${EXEC_BASE_DIR}$(/usr/bin/env echo "${INPUT_FILE}" | cut -d "." -f 1).err";

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "TEMPFILE -> ${TEMPFILE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "DATABASE_TYPE -> ${DATABASE_TYPE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "SYSTEM_FQDN -> ${SYSTEM_FQDN}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "DATABASE_NAME -> ${DATABASE_NAME}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "USER_LOGIN_NAME -> ${USER_LOGIN_NAME}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "USER_LOGIN_PASS -> ${USER_LOGIN_PASS}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONNECT_LOGIN_NAME -> ${CONNECT_LOGIN_NAME}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CONNECT_LOGIN_PASS -> ${CONNECT_LOGIN_PASS}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "EXEC_BASE_DIR -> ${EXEC_BASE_DIR}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "PSDMTX_STDOUT_LOG -> ${PSDMTX_STDOUT_LOG}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "PSDMTX_STDERR_LOG -> ${PSDMTX_STDERR_LOG}";

    if [ ! -f "${INPUT_FILE}" ]
    then
        RETURN_CODE=1;

        writeLogEntry "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "The provided input file, ${INPUT_FILE}, does not exist.";
        writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "The provided input file, ${INPUT_FILE}, does not exist.";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

        [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

        [ ! -z "${TEMPFILE}" ] && unset TEMPFILE;
        [ ! -z "${DATABASE_TYPE}" ] && unset DATABASE_TYPE;
        [ ! -z "${INPUT_FILE}" ] && unset INPUT_FILE;
        [ ! -z "${SYSTEM_FQDN}" ] && unset SYSTEM_FQDN;
        [ ! -z "${DATABASE_NAME}" ] && unset DATABASE_NAME;
        [ ! -z "${USER_LOGIN_NAME}" ] && unset USER_LOGIN_NAME;
        [ ! -z "${USER_LOGIN_PASS}" ] && unset USER_LOGIN_PASS;
        [ ! -z "${CONNECT_LOGIN_NAME}" ] && unset CONNECT_LOGIN_NAME;
        [ ! -z "${CONNECT_LOGIN_PASS}" ] && unset CONNECT_LOGIN_PASS;
        [ ! -z "${EXEC_BASE_DIR}" ] && unset EXEC_BASE_DIR;
        [ ! -z "${PSDMTX_STDOUT_LOG}" ] && unset PSDMTX_STDOUT_LOG;
        [ ! -z "${PSDMTX_STDERR_LOG}" ] && unset PSDMTX_STDERR_LOG;
        [ ! -z "${VERIFY_ENTRY}" ] && unset VERIFY_ENTRY;
        [ ! -z "${VARIABLE_SET}" ] && unset VARIABLE_SET;
        [ ! -z "${METHOD_NAME}" ] && unset METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    for VERIFY_ENTRY in "USER_LOGIN_NAME" "USER_LOGIN_PASS" "CONNECT_LOGIN_NAME" "CONNECT_LOGIN_PASS"
    do
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "VERIFY_ENTRY -> ${VERIFY_ENTRY}";

        typeset VARIABLE_SET="$(set | grep "${VERIFY_ENTRY}" | cut -d "=" -f 2)";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "VERIFY_ENTRY -> ${VERIFY_ENTRY}";

        [ "${VARIABLE_SET}" = "${VERIFY_ENTRY}" ] && continue;

        if [ -z "${VARIABLE_SET}" ]
        then
            RETURN_CODE=1;

            writeLogEntry "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "Required variable ${VERIFY_ENTRY} is not currently set. Cannot continue.";
            writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Required variable ${VERIFY_ENTRY} is not currently set. Cannot continue.";

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

            [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

            [ ! -z "${TEMPFILE}" ] && unset TEMPFILE;
            [ ! -z "${DATABASE_TYPE}" ] && unset DATABASE_TYPE;
            [ ! -z "${INPUT_FILE}" ] && unset INPUT_FILE;
            [ ! -z "${SYSTEM_FQDN}" ] && unset SYSTEM_FQDN;
            [ ! -z "${DATABASE_NAME}" ] && unset DATABASE_NAME;
            [ ! -z "${USER_LOGIN_NAME}" ] && unset USER_LOGIN_NAME;
            [ ! -z "${USER_LOGIN_PASS}" ] && unset USER_LOGIN_PASS;
            [ ! -z "${CONNECT_LOGIN_NAME}" ] && unset CONNECT_LOGIN_NAME;
            [ ! -z "${CONNECT_LOGIN_PASS}" ] && unset CONNECT_LOGIN_PASS;
            [ ! -z "${EXEC_BASE_DIR}" ] && unset EXEC_BASE_DIR;
            [ ! -z "${PSDMTX_STDOUT_LOG}" ] && unset PSDMTX_STDOUT_LOG;
            [ ! -z "${PSDMTX_STDERR_LOG}" ] && unset PSDMTX_STDERR_LOG;
            [ ! -z "${VERIFY_ENTRY}" ] && unset VERIFY_ENTRY;
            [ ! -z "${VARIABLE_SET}" ] && unset VARIABLE_SET;
            [ ! -z "${METHOD_NAME}" ] && unset METHOD_NAME;

            [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
            [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

            return ${RETURN_CODE};
        fi
    done

    case "${DATABASE_TYPE}" in
        [Dd][Bb]2[Uu][Nn][Ii][Xx]|[Oo][Rr][Aa][Cc][Ll][Ee])
            printf "-CT %s\n" "${DATABASE_TYPE}" >> "${TEMPFILE}";
            printf "-CS %s\n" "${SYSTEM_FQDN}" >> "${TEMPFILE}";
            printf "-CD %s\n" "${DATABASE_NAME}" >> "${TEMPFILE}";
            printf "-CO %s\n" "${USER_LOGIN_NAME}" >> "${TEMPFILE}";
            printf "-CP %s\n" "${USER_LOGIN_PASS}" >> "${TEMPFILE}";
            printf "-CI %s\n" "${CONNECT_LOGIN_NAME}" >> "${TEMPFILE}";
            printf "-CW %s\n" "${CONNECT_LOGIN_PASS}" >> "${TEMPFILE}";
            printf "-FP %s\n" "${INPUT_FILE}" >> "${TEMPFILE}";
            ;;
        *)
            RETURN_CODE=3;

            writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} - Run a datamover script via PeopleTools psdmtx"
            writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Usage: ${METHOD_NAME} [ database type ] [ import file ]
                    -> The database type to utilize.
                        One of the following:
                            DB2UNIX
                            ORACLE
                    -> The full path to the import file to utilize.";

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
            [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

            [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

            [ ! -z "${TEMPFILE}" ] && unset TEMPFILE;
            [ ! -z "${DATABASE_TYPE}" ] && unset DATABASE_TYPE;
            [ ! -z "${INPUT_FILE}" ] && unset INPUT_FILE;
            [ ! -z "${SYSTEM_FQDN}" ] && unset SYSTEM_FQDN;
            [ ! -z "${DATABASE_NAME}" ] && unset DATABASE_NAME;
            [ ! -z "${USER_LOGIN_NAME}" ] && unset USER_LOGIN_NAME;
            [ ! -z "${USER_LOGIN_PASS}" ] && unset USER_LOGIN_PASS;
            [ ! -z "${CONNECT_LOGIN_NAME}" ] && unset CONNECT_LOGIN_NAME;
            [ ! -z "${CONNECT_LOGIN_PASS}" ] && unset CONNECT_LOGIN_PASS;
            [ ! -z "${EXEC_BASE_DIR}" ] && unset EXEC_BASE_DIR;
            [ ! -z "${PSDMTX_STDOUT_LOG}" ] && unset PSDMTX_STDOUT_LOG;
            [ ! -z "${PSDMTX_STDERR_LOG}" ] && unset PSDMTX_STDERR_LOG;
            [ ! -z "${VERIFY_ENTRY}" ] && unset VERIFY_ENTRY;
            [ ! -z "${VARIABLE_SET}" ] && unset VARIABLE_SET;
            [ ! -z "${METHOD_NAME}" ] && unset METHOD_NAME;

            [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
            [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

            return ${RETURN_CODE};
            ;;
    esac

#export ORACLE_HOME                      ; ORACLE_HOME="/psapps/opt/tools/oracle/product/11.2";
export ORACLE_PATH                      ; ORACLE_PATH="${ORACLE_HOME}/bin";
export ORACLE_LIBS                      ; ORACLE_LIBS="${ORACLE_HOME}/lib";
export TNS_ADMIN                        ; TNS_ADMIN="${ORACLE_HOME}/network/admin";

## add to path
export PATH                             ; PATH="${PATH}:${ORACLE_HOME}/bin";

## libpath
export LD_LIBRARY_PATH                  ; LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${ORACLE_PATH}:${ORACLE_LIBS}";
export LIBPATH                          ; LIBPATH="${LIBPATH}:${ORACLE_PATH}:${ORACLE_LIBS}";
export LIB_PATH                         ; LIB_PATH="${LIB_PATH}:${ORACLE_PATH}:${ORACLE_LIBS}";
export LD_RUN_PATH                      ; LD_RUN_PATH="${LD_RUN_PATH}:${ORACLE_PATH}:${ORACLE_LIBS}";


export PATH=${PATH}:${PS_HOME}/bin:${ORACLE_HOME}/bin:${TUXDIR}/bin
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64:${TUXDIR}/bin:${TUXDIR}/lib:${PS_HOME}/bin:${ORACLE_HOME}/lib:${ORACLE_HOME}/lib32:${ORACLE_HOME}/lib64
export LIBPATH=${LIBPATH}:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64:${TUXDIR}/bin:${TUXDIR}/lib:${PS_HOME}/bin:${ORACLE_HOME}/lib:${ORACLE_HOME}/lib32:${ORACLE_HOME}/lib64
export LIB_PATH=${LIB_PATH}:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64:${TUXDIR}/bin:${TUXDIR}/lib:${PS_HOME}/bin:${ORACLE_HOME}/lib:${ORACLE_HOME}/lib32:${ORACLE_HOME}/lib64

    (cd ${EXEC_BASE_DIR}; exec ${PS_HOME}/bin/psdmtx "${TEMPFILE}" 1>|${PSDMTX_STDOUT_LOG} 2>${PSDMTX_STDERR_LOG});
    wait;
    typeset -i RETURN_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" ] && [ "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${TEMPFILE}" ] && [ -f "${TEMPFILE}" ] && rm -f "${TEMPFILE}";

    [ ! -z "${TEMPFILE}" ] && unset TEMPFILE;
    [ ! -z "${DATABASE_TYPE}" ] && unset DATABASE_TYPE;
    [ ! -z "${INPUT_FILE}" ] && unset INPUT_FILE;
    [ ! -z "${SYSTEM_FQDN}" ] && unset SYSTEM_FQDN;
    [ ! -z "${DATABASE_NAME}" ] && unset DATABASE_NAME;
    [ ! -z "${USER_LOGIN_NAME}" ] && unset USER_LOGIN_NAME;
    [ ! -z "${USER_LOGIN_PASS}" ] && unset USER_LOGIN_PASS;
    [ ! -z "${CONNECT_LOGIN_NAME}" ] && unset CONNECT_LOGIN_NAME;
    [ ! -z "${CONNECT_LOGIN_PASS}" ] && unset CONNECT_LOGIN_PASS;
    [ ! -z "${EXEC_BASE_DIR}" ] && unset EXEC_BASE_DIR;
    [ ! -z "${PSDMTX_STDOUT_LOG}" ] && unset PSDMTX_STDOUT_LOG;
    [ ! -z "${PSDMTX_STDERR_LOG}" ] && unset PSDMTX_STDERR_LOG;
    [ ! -z "${VERIFY_ENTRY}" ] && unset VERIFY_ENTRY;
    [ ! -z "${VARIABLE_SET}" ] && unset VARIABLE_SET;
    [ ! -z "${METHOD_NAME}" ] && unset METHOD_NAME;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return ${RETURN_CODE};
}
