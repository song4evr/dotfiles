#!/usr/bin/env expect
#==============================================================================
#
#          FILE:  ssh
#         USAGE:  ./ssh
#   DESCRIPTION:  Executes an scp connection to a pre-defined server
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================
if { [ info exists env(ENABLE_VERBOSE) ] } {
    if { [ string match -nocase $env(ENABLE_VERBOSE) "true" ] == 1 } {
        log_user 1;
    } else {
        log_user 0;
    }
} else {
    log_user 0;
}

if { [ info exists env(ENABLE_TRACE) ] } {
    if { [ string match -nocase $env(ENABLE_TRACE) "true" ] == 1 } {
        exp_internal 1;
    }
}

log_file -a $env(HOME)/.log/ssh.log;

## set up some class info
global env;
global _CNAME;
global _METHOD_NAME;
global _LINE_TERMINATOR;

set _CNAME "ssh";
set _METHOD_NAME "ssh";
set _LINE_TERMINATOR "\r\n";
set timeout 10;

if { [info exists env(THREAD_TIMEOUT)] } {
    set timeout $env(THREAD_TIMEOUT);
}

source [ file join [ file dirname [ info script ] ] misc.tcl ];
source [ file join [ file dirname [ info script ] ] security.tcl ];

proc usage {} {
    global _METHOD_NAME;

    puts stderr "$_METHOD_NAME Perform an automated SSH-based task without user interaction.";
    puts stderr "Usage: $_METHOD_NAME \[ -host <hostname> \] \[ -user <user> \] \[ -config <config file> \] \[ -cmd <command> \] ( -tmout <timeout> )";
    puts stderr "\thost                The target hostname to connect to. The host must be either an IP address or resolvable hostname.";
    puts stderr "\tusername            The user to connect to the remote system as.";
    puts stderr "\tKey File            The SSH keyfile to utilize (optional)";
    puts stderr "\tConfigFile          The configuration file to utilize (optional).";
    puts stderr "\tcommand             The command to execute on the remote system. If an interactive shell is required, specify 'shell' here.";
    puts stderr "\ttimeout             A timeout value for the script to wait if it hangs. If not specified, a value of 10 seconds is used.";

    exit 1;
}

## make sure we have all our arguments
if { [ expr { $argc < 2 } ] } {
    usage;
} else {
    for { set a 0 } { $a ne $argc } { incr a } {
        set PARM_NAME [ string toupper [ string range [ lindex $argv $a ] 2 [ string length [ lindex $argv $a ] ] ] ]
        set [ set PARM_NAME ] [ lindex [ split [ parseParams "[ lindex $argv $a ] [ lindex $argv [ expr "$a" + "1" ] ]" ] " " ] 1 ]

        incr a;
    }

    set _AUTH_DATA [ split [ getAuthValue $TARGET_SYSTEM $USER_LOGINID java ] " " ];

    switch [ llength $_AUTH_DATA ] {
        1 {
            set _USER_PASSWD $_AUTH_DATA;
        }
        2 {
            set _USER_KEY [ lindex $_AUTH_DATA 0 ];
            set _USER_PASSWD [ lindex $_AUTH_DATA 1 ];
        }
    }
}

if { [ info exists CONFIG_FILE ] } {
    if { [ string match -nocase $EXEC_CMND "shell" ] } {
        set _SSH_COMMAND "ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -qaCktl $USER_LOGINID -F $CONFIG_FILE";
    } else {
        set _SSH_COMMAND "ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -qaCktl $USER_LOGINID -F $CONFIG_FILE \"$EXEC_CMND\"";
    }
} else {
    set _SSH_COMMAND "ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -qaCktl $USER_LOGINID";
}

if { [ info exists env(NEW_PASSWD_FILE) ] } {
    set _ENCRYPTED $env(ENCR_TYPE);
    set _CHANGE_DATA [ getAuthValue $TARGET_SYSTEM $USER_LOGINID $env(NEW_PASSWD_FILE) ];
}

set i 0;

eval spawn $_SSH_COMMAND $TARGET_SYSTEM

expect {
    "*(yes/no)? " {
        exp_send "yes\r";
        exp_continue;
    }
    "*id_?sa*" {
        if { [ info exists _USER_PASSWD ] } {
            exp_send "$_USER_PASSWD";
        }

        exp_send "\r";
        exp_continue;
    }
    "*Changing password for *$USER_LOGINID*" {
        ## set up password change here
        if { [ info exists _CHANGE_DATA ] } {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "$_CHANGE_DATA" ];
        } else {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "" ];
        }

        switch $_RETURN_VALUE {
            1 - 2 - 3 {
                puts stderr "Unable to change password for provided user account $USER_LOGINID on host $TARGET_SYSTEM";

                exit 0;
            }
            default {
                puts "$_RETURN_VALUE"
                puts "Password successfully changed for user $USER_LOGINID to $_RETURN_VALUE on host $TARGET_SYSTEM";
            }
        }
    }
    "*Changing password for user *$USER_LOGINID*" {
        ## set up password change here
        if { [ info exists _CHANGE_DATA ] } {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "$_CHANGE_DATA" ];
        } else {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "" ];
        }

        switch $_RETURN_VALUE {
            1 - 2 - 3 {
                puts stderr "Unable to change password for provided user account $USER_LOGINID on host $TARGET_SYSTEM";

                exit 0;
            }
            default {
                puts "$_RETURN_VALUE"
                puts "Password successfully changed for user $USER_LOGINID to $_RETURN_VALUE on host $TARGET_SYSTEM";
            }
        }
    }
    "*?assword*" {
        if { [ expr { $i == 1 } ] } {
            puts stderr "An invalid password was provided for user account $USER_LOGINID on host $TARGET_SYSTEM";

            exit 1;
        }

        set i [ expr { $i + 1 } ];

        exp_send "$_USER_PASSWD\r";
        exp_continue;
    }
    $_LINE_TERMINATOR {
        expect {
            "*Changing password for *$USER_LOGINID*" {
                ## set up password change here
                if { [ info exists _CHANGE_DATA ] } {
                    set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                } else {
                    set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "" ];
                }

                switch $_RETURN_VALUE {
                    1 - 2 - 3 {
                        puts stderr "Unable to change password for provided user account $USER_LOGINID on host $TARGET_SYSTEM";

                        exit 0;
                    }
                    default {
                        puts "$_RETURN_VALUE"
                        puts "Password successfully changed for user $USER_LOGINID to $_RETURN_VALUE on host $TARGET_SYSTEM";
                    }
                }
            }
            "*Changing password for user *$USER_LOGINID*" {
                ## set up password change here
                if { [ info exists _CHANGE_DATA ] } {
                    set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                } else {
                    set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "" ];
                }

                switch $_RETURN_VALUE {
                    1 - 2 - 3 {
                        puts stderr "Unable to change password for provided user account $USER_LOGINID on host $TARGET_SYSTEM";

                        exit 0;
                    }
                    default {
                        puts "$_RETURN_VALUE"
                        puts "Password successfully changed for user $USER_LOGINID to $_RETURN_VALUE on host $TARGET_SYSTEM";
                    }
                }
            }
            "*?assword*" {
                if { [ expr { $i == 1 } ] } {
                    puts stderr "An invalid password was provided for user account $USER_LOGINID on host $TARGET_SYSTEM";

                    exit 1;
                }

                set i [ expr { $i + 1 } ];

                exp_send "$_USER_PASSWD\r";
                exp_continue;
            }
            $_LINE_TERMINATOR {
                if { [ string compare $EXEC_CMND "shell" ] == 0 } {
                    exp_send "\r";
                    interact;
                } else {
                    if { [ string compare $EXEC_CMND "passwd" ] == 0 } {
                        if { [ info exists _CHANGE_DATA ] } {
                            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                        } else {
                            set _RETURN_VALUE [ changeAccountPassword "account" "$USER_LOGINID" "$_USER_PASSWD" "" ];
                        }

                        switch $_RETURN_VALUE {
                            1 - 2 - 3 {
                                puts stderr "Unable to change password for provided user account $USER_LOGINID on host $TARGET_SYSTEM";

                                exit 0;
                            }
                            default {
                                puts "$_RETURN_VALUE"
                                puts "Password successfully changed for user $USER_LOGINID to $_RETURN_VALUE on host $TARGET_SYSTEM";
                            }
                        }
                    }

                    append output $expect_out(buffer);
                    exp_continue;
                }
            }
            eof {
                append output $expect_out(buffer);
            }
        }
    }
    eof {
        append output $expect_out(buffer);
    }
}

if { [ info exists output ] eq 1 } {
    regsub -all -line {^[ \r\t]+|[ \r\t]+$} $output "" _RETURN_DATA;
    set _PRINT_DATA [ string trimright $_RETURN_DATA ];

    if { [ string compare -nocase $_PRINT_DATA "" ] != 0 } {
        if { [ string is integer $_PRINT_DATA ] } {
            exit $_PRINT_DATA;
        } else {
            puts $_PRINT_DATA;

            exit 0;
        }
    } else {
        exit 0;
    }
}
