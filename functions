#==============================================================================
#
#          FILE:  functions
#         USAGE:  . functions
#   DESCRIPTION:  Sets application-wide functions
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#
#==============================================================================

[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
[ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

trap "[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] set +v;" INT TERM EXIT;

## load functions
for FUNCTION in ${HOME}/.functions.d/F*
do
    [ -z "${FUNCTION}" ] && continue;

    case $([ ! -z "$(awk -F "/" '{print $NF}' <<< "${FUNCTION}" | egrep "^F([0-9]{1,3})-.*")" ] && echo "0") in
        0)
            case "$(echo "${SHELL}" | awk -F "/" '{print $NF}')" in
                [Kk][Ss][Hh])
                    if [ ! -z "$(/usr/bin/env ksh -n "${FUNCTION}")" ]
                    then
                        printf "%s\n" "NOT LOADING ${FUNCTION}: SYNTAX/COMPILATION ERRORS" >&2;

                        continue;
                    fi

                    set -A FUNCTION_NAMES ${FUNCTION_NAMES[*]} $(/usr/bin/env grep "function" "${FUNCTION}" | grep -v "#" | awk '{print $NF}');
                    ;;
                [Bb][Aa][Ss][Hh])
                    if [ ! -z "$(/usr/bin/env bash -n "${FUNCTION}")" ]
                    then
                        printf "%s\n" "NOT LOADING ${FUNCTION}: SYNTAX/COMPILATION ERRORS" >&2;

                        continue;
                    fi

                    typeset -a FUNCTION_NAMES=( ${FUNCTION_NAMES[*]} $(/usr/bin/env grep "function" "${FUNCTION}" | grep -v "#" | awk '{print $NF}') );
                    ;;
            esac

            case "${ENABLE_VERBOSE}" in
                "${_TRUE}")
                    . ${FUNCTION};
                    ;;
                *)
                    . ${FUNCTION} >| /dev/null 2>&1;
                    ;;
            esac

            for FUNCTION_NAME in ${FUNCTION_NAMES[*]}
            do
                typeset -xf "${FUNCTION_NAME}";

                [ ! -z "${FUNCTION_NAME}" ] && unset FUNCTION_NAME;
            done
        ;;
    esac

    [ ! -z "${FUNCTION}" ] && unset FUNCTION;
    [ ! -z "${INPUT}" ] && unset INPUT;
    [ ! -z "${FUNCTION_NAMES[*]}" ] && unset FUNCTION_NAMES;
done

[ ! -z "${FUNCTION}" ] && unset FUNCTION;
[ ! -z "${INPUT}" ] && unset INPUT;
[ ! -z "${FUNCTION_NAMES[*]}" ] && unset FUNCTION_NAMES;
[ ! -z "${FUNCTION_NAME}" ] && unset FUNCTION_NAME;

[ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
[ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
