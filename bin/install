#!/usr/bin/env bash
#==============================================================================
#
#          FILE:  profile
#         USAGE:  . ~/profile
#   DESCRIPTION:
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  CaspersBox Web Services
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

trap 'set +v; set +x' INT TERM EXIT;

typeset -x PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";

[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x;
[ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v;

## Application constants
CNAME="$(/usr/bin/env basename "${0}")";
SCRIPT_ABSOLUTE_PATH="$(cd "${0%/*}" 2>/dev/null; echo "${PWD}/${0##*/}")";
SCRIPT_ROOT="$(/usr/bin/env dirname "${SCRIPT_ABSOLUTE_PATH}")";
METHOD_NAME="${CNAME}#startup";

[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${CNAME} starting up.. Process ID ${$}" >&2;
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter" >&2;
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${*}" >&2;

## default variables
typeset -i ERROR_COUNT=0;
typeset BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"/../ && pwd)"
typeset CONFIG="${BASEDIR}/etc/install.conf.yaml"
typeset DOTBOT_DIR="dotbot"
typeset DOTBOT_BIN="bin/dotbot"

[ ! -d ${HOME}/.log ] && mkdir -pv ${HOME}/.log;

[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BASEDIR -> ${BASEDIR}" >&2;
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CONFIG -> ${CONFIG}" >&2;
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "DOTBOT_DIR -> ${DOTBOT_DIR}" >&2;
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "DOTBOT_BIN -> ${DOTBOT_BIN}" >&2;

[ ! -d ${HOME}/.log ] && /usr/bin/env mkdir -pv ${HOME}/.log;

#=====  FUNCTION  =============================================================
#          NAME:  loadFilesToRemote
#   DESCRIPTION:  Re-loads existing dotfiles for use
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function loadFilesToRemote
{
    trap '[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")" >&2;
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}" >&2;

    if [ ${#} -eq 0 ]
    then
        typeset -i RETURN_CODE=3;

        writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} - Transfer and apply dotfiles";
        writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Usage: ${METHOD_NAME} [ username ]
                -> The type of key to retrieve - host or public
                -> If the type of key is \"keyfile\", this should be the private key. If the type of key is \"host\", this should be the system hostname.
                -> The known_hosts file to utilize.
                    -> Required if key type is \"host\"
                -> Replace invalid/incorrect keys
                    -> Required if key type is \"host\", defaults to ${_FALSE}
                -> Show keys instead of saving them";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${SSH_CONFIG_DIRECTORY}" ] && unset -v SSH_CONFIG_DIRECTORY;
        [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
        [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    ## if there's an actual ssh_config (${HOME}/.ssh/config); then use that first
    for TARGET_HOSTNAME in $(/usr/bin/env grep HostName ${HOME}/.ssh/config | /usr/bin/env awk '{print $NF}')
    do
        printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Processing node: ${TARGET_HOSTNAME}" >&1;

        for SSH_KEYFILE in $(/usr/bin/env grep IdentityFile ${HOME}/.ssh/config | /usr/bin/env awk -F "=" '{print $2}' | /usr/bin/env sort | /usr/bin/env uniq)
        do
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SSH_KEYFILE -> ${SSH_KEYFILE}" >&2;

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Adding keyfile ${SSH_KEYFILE}.." >&2;

            /usr/bin/env ssh-copy-id -i ${HOME}/.ssh/${SSH_KEYFILE} ${LOGNAME}@${TARGET_HOSTNAME} > /dev/null 2>&1;
            typeset -i RET_CODE=${?};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

            [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ] && printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

            [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
            [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
        done

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to remove existing files.." >&2;

        /usr/bin/env ssh -qtl ${LOGNAME} -i ${HOME}/.ssh/id_rsa ${TARGET_HOSTNAME} "rm -rf * .dotfiles .zshrc .bashrc .bash_profile .bash_logout .alias .xlaunch .wgetrc .vimrc .tmux.conf .subversion .screenrc \
            .pythonrc .profile.d .profile .my.cnf .mailrc .lib .kshrc .inputrc .gnupg .gitconfig .functions.d .functions .etc .digrc .curlrc .config .colordiffrc .bin .alias.d .mail .m2 \
            .ansible .dotfiles .viminfo .rnd .log" > /dev/null 2>&1;
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

        if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
        then
            printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

            [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
            [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
            [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

            continue;
        fi

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to install files..." >&2;

        /usr/bin/env rsync -qCcarulKHpEAgtSihs -e "ssh -qaCk -E ${HOME}/.log/ssh.log -i ${HOME}/.ssh/id_rsa -l ${LOGNAME}" \
            --temp-dir=/var/tmp --timeout=45 --no-motd --delete --delete-excluded --progress --exclude-from=${HOME}/.etc/excludes \
            --blocking-io --stats --progress --log-file=${HOME}/.log/rsync.log ~/.dotfiles ${TARGET_HOSTNAME}: >/dev/null 2>&1;
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

        if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
        then
            printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

            [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
            [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
            [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

            continue;
        fi

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to apply profile.." >&2;

        /usr/bin/env ssh -qtl ${USERNAME} -i ~/.ssh/id_rsa ${TARGET_HOSTNAME} ".dotfiles/bin/install";
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

        [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ] && printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;
    done

    ## check if there are any config directories housing files
    for SSH_CONFIG_DIRECTORY in $(/usr/bin/env find ${HOME}/.ssh -type d -name config.d)
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SSH_CONFIG_DIRECTORY -> ${SSH_CONFIG_DIRECTORY}" >&2;

        for TARGET_HOSTNAME in $(grep HostName ${SSH_CONFIG_DIRECTORY} | awk '{print $NF}')
        do
            printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Processing node: ${TARGET_HOSTNAME}" >&1;

            for SSH_KEYFILE in $(/usr/bin/env grep IdentityFile ${SSH_CONFIG_DIRECTORY} | /usr/bin/env awk -F "=" '{print $2}' | /usr/bin/env egrep -v "~/.ssh/id_rsa|~/.ssh/id_dsa|~/.ssh/id_ecdsa" | /usr/bin/env sort | /usr/bin/env uniq)
            do
                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SSH_KEYFILE -> ${SSH_KEYFILE}" >&2;

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Adding keyfile ${SSH_KEYFILE}.." >&2;

                /usr/bin/env ssh-copy-id -i ${HOME}/.ssh/${SSH_KEYFILE} ${LOGNAME}@${TARGET_HOSTNAME} > /dev/null 2>&1;
                typeset -i RET_CODE=${?};

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

                [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ] && printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

                [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
                [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
            done

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to remove existing files.." >&2;

            /usr/bin/env ssh -qtl ${LOGNAME} ${TARGET_HOSTNAME} "rm -rf * .dotfiles .zshrc .bashrc .bash_profile .bash_logout .alias .xlaunch .wgetrc .vimrc .tmux.conf .subversion .screenrc \
                .pythonrc .profile.d .profile .my.cnf .mailrc .lib .kshrc .inputrc .gnupg .gitconfig .functions.d .functions .etc .digrc .curlrc .config .colordiffrc .bin .alias.d .mail .m2 \
                .ansible .dotfiles .viminfo .rnd .log" > /dev/null 2>&1;
            typeset -i RET_CODE=${?};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

            if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
            then
                printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

                [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
                [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
                [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

                continue;
            fi

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to install files..." >&2;

            /usr/bin/env rsync -qCcarulKHpEAgtSihs -e "ssh -qaCk -E ${HOME}/.log/ssh.log -l ${LOGNAME}" \
                --temp-dir=/var/tmp --timeout=45 --no-motd --delete --delete-excluded --progress --exclude-from=${HOME}/.etc/excludes \
                --blocking-io --stats --progress --log-file=${HOME}/.log/rsync.log ~/.dotfiles ${TARGET_HOSTNAME}: >/dev/null 2>&1;
            typeset -i RET_CODE=${?};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

            if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
            then
                printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

                [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
                [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
                [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

                continue;
            fi

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Connecting to host to apply profile.." >&2;

            /usr/bin/env ssh -qtl ${LOGNAME} ${TARGET_HOSTNAME} ".dotfiles/bin/install";
            typeset -i RET_CODE=${?};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}" >&2;

            [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ] && printf "%s %s %s %s %s\n" "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "An error occurred adding key ${SSH_KEYFILE} to host ${TARGET_HOSTNAME}" >&2;

            [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
            [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
            [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        done

        [ ! -z "${SSH_CONFIG_DIRECTORY}" ] && unset -v SSH_CONFIG_DIRECTORY;
        [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
        [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    done

    [ ${ERROR_COUNT} -ne 0 ] && typeset -i RETURN_CODE=${ERROR_COUNT} || typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit" >&2;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS" >&2;
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")" >&2;

    [ ! -z "${SSH_CONFIG_DIRECTORY}" ] && unset -v SSH_CONFIG_DIRECTORY;
    [ ! -z "${TARGET_HOSTNAME}" ] && unset -v TARGET_HOSTNAME;
    [ ! -z "${SSH_KEYFILE}" ] && unset -v SSH_KEYFILE;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  installFiles
#   DESCRIPTION:  Re-loads existing dotfiles for use
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function installFiles
{
    trap '[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] || set +x; [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v; set -o noclobber' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")" >&2;
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}" >&2;

    typeset -i ERROR_COUNT=0;
    typeset DOTFILES_HOME="${HOME}/.dotfiles";
    typeset INSTALL_YAML="${DOTFILES_HOME}/etc/install.conf.yaml";
    typeset CURR_IFS="${IFS}";
    typeset IFS=$'\n'

    ## clean up home directory first
    for LINKED_ENTRY in $(/usr/bin/env find . -maxdepth 1 -type l)
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "LINKED_ENTRY -> ${LINKED_ENTRY}" >&2;

        /usr/bin/env unlink ${LINKED_ENTRY};

        [ ! -z "${LINKED_ENTRY}" ] && unset -v LINKED_ENTRY;
    done

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "DOTFILES_HOME -> ${DOTFILES_HOME}" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "INSTALL_YAML -> ${INSTALL_YAML}" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "CURR_IFS -> ${CURR_IFS}" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "IFS -> ${IFS}" >&2;

    for DIRECTORY_ENTRY in $(/usr/bin/env cat "${INSTALL_YAML}" | /usr/bin/env grep "mkdir" | /usr/bin/env cut -d "," -f 1 | /usr/bin/env cut -d "[" -f 2)
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "DIRECTORY_ENTRY -> ${DIRECTORY_ENTRY}" >&2;

        typeset DIRECTORY_NAME="$(/usr/bin/env awk '{print $NF}' <<< "${DIRECTORY_ENTRY}" | /usr/bin/env sed -e "s^~/^^g")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "DIRECTORY_NAME -> ${DIRECTORY_NAME}" >&2;

        [ -z "${DIRECTORY_NAME}" ] && continue;

        if [ ! -d "${DIRECTORY_NAME}" ]
        then
            printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "${DIRECTORY_NAME} doesn't currently exist. Creating." >&1;

            /usr/bin/env mkdir -pv "${HOME}/${DIRECTORY_NAME}" 1>>/${HOME}/.log/mkdir.out 2>${HOME}/.log/mkdir.err;

            if [ -d "${HOME}/${DIRECTORY_NAME}" ]
            then
                printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "${DIRECTORY_NAME} created." >&1;
            else
                printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to create directory ${DIRECTORY_NAME}" >&2;

                (( ERROR_COUNT += 1 ));
            fi
        fi

        [ ! -z "${DIRECTORY_NAME}" ] && unset -v DIRECTORY_NAME;
        [ ! -z "${DIRECTORY_ENTRY}" ] && unset -v DIRECTORY_ENTRY;
    done

    for LINKED_ENTRY in $(/usr/bin/env cat "${INSTALL_YAML}" | /usr/bin/env grep "~/" | /usr/bin/env egrep -v "mkdir|dotfiles|chmod|cd|ssh-keygen" | /usr/bin/env sed -e "s/^ *//g;s/ *$//g")
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "LINKED_ENTRY -> ${LINKED_ENTRY}" >&2;

        [ -z "${LINKED_ENTRY}" ] && continue;

        typeset LINK_TARGET="${HOME}/$(/usr/bin/env tr -d '[[:space:]]' <<< "${LINKED_ENTRY}" | /usr/bin/env cut -d ":" -f 1 | /usr/bin/env sed -e "s^~/^^g")";
        typeset LINK_SOURCE="${DOTFILES_HOME}/$(/usr/bin/env tr -d '[[:space:]]' <<< "${LINKED_ENTRY}" | /usr/bin/env cut -d ":" -f 2 | /usr/bin/env sed -e "s^~/^^g")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "LINK_TARGET -> ${LINK_TARGET}" >&2;
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "LINK_SOURCE -> ${LINK_SOURCE}" >&2;

        [ -z "${LINK_TARGET}" ] && continue;
        [ -z "${LINK_SOURCE}" ] && continue;

        [ -f "${LINK_TARGET}" -a ! -L "${LINK_TARGET}" ] && rm -f "${LINK_TARGET}";
        [ -d "${LINK_TARGET}" -a ! -L "${LINK_TARGET}" ] && rm -rf "${LINK_TARGET}";

        if [ ! -L "${LINK_TARGET}" ]
        then
            printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "Creating symbolic link for ${LINK_SOURCE} to ${LINK_TARGET}.." >&1;

            /usr/bin/env ln -s ${LINK_SOURCE} ${LINK_TARGET} 1>>${HOME}/.log/link.out 2>>${HOME}/.log/link.err;

            if [ -L "${LINK_TARGET}" ]
            then
                printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "${LINK_SOURCE} successfully linked to ${LINK_TARGET}" >&1;
            else
                printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to link ${LINK_SOURCE} to ${LINK_TARGET}" >&2;

                (( ERROR_COUNT += 1 ));
            fi
        fi

        [ ! -z "${LINK_SOURCE}" ] && unset -v LINK_SOURCE;
        [ ! -z "${LINK_TARGET}" ] && unset -v LINK_TARGET;
        [ ! -z "${LINKED_ENTRY}" ] && unset -v LINKED_ENTRY;
    done

    printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "Updating permissions..." >&1;

    cd ~/.dotfiles; /usr/bin/env find . -type d -exec /usr/bin/env chmod 755;
    cd ~/.dotfiles; /usr/bin/env find . -type f -exec /usr/bin/env chmod 644;
    /usr/bin/env chmod 700 ~/ ~/.ssh;
    /usr/bin/env chmod 600 ~/.dotfiles/etc/ldaprc ~/.dotfiles/etc/curlrc ~/.dotfiles/etc/screenrc ~/.dotfiles/m2/settings.xml \
        ~/.dotfiles/etc/SecurityService/config/ServiceConfig.xml ~/.dotfiles/etc/eSolutionsCore/config/ServiceConfig.xml;
    /usr/bin/env chmod 755 ~/.dotfiles/bin/* ~/.dotfiles/lib/*;
    /usr/bin/env chmod 644 ~/.dotfiles/bin/profile ~/.dotfiles/ssh/config;

    cd ~/.dotfiles; /usr/bin/env find . -type d -exec /usr/bin/env chmod 755 {} \; ;
    cd ~/.dotfiles; /usr/bin/env find . -type f -exec /usr/bin/env chmod 644 {} \; ;
    /usr/bin/env chmod 600 ~/.dotfiles/etc/ldaprc ~/.dotfiles/etc/curlrc ~/.dotfiles/etc/wgetrc ~/.dotfiles/etc/netrc \
        ~/.dotfiles/config/subversion/servers ~/.dotfiles/config/subversion/servers ~/.dotfiles/m2/settings.xml \
        ~/.dotfiles/etc/SecurityService/config/ServiceConfig.xml ~/.dotfiles/etc/eSolutionsCore/config/ServiceConfig.xml;
    /usr/bin/env chmod 755 ~/.dotfiles/bin/* ~/.dotfiles/lib/*;
    /usr/bin/env chmod 644 ~/.ssh/config ~/.ssh/config/config.d/cws;

    printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "Creating SSH keypairs..." >&1;

    if [ -f ~/.ssh/known_hosts ]
    then
        [ ! -f ~/.ssh/id_rsa ] && /usr/bin/env ssh-keygen -t rsa -b 4096 -N "" -C "" -f ~/.ssh/id_rsa;
        [ ! -f ~/.ssh/id_dsa ] && /usr/bin/env ssh-keygen -t dsa -b 1024 -N "" -C "" -f ~/.ssh/id_dsa;
        [ ! -f ~/.ssh/id_ecdsa ] && /usr/bin/env ssh-keygen -t ecdsa -b 521 -N "" -C "" -f ~/.ssh/id_ecdsa;

        /usr/bin/env chmod 600 ~/.ssh/id_rsa ~/.ssh/id_dsa ~/.ssh/id_ecdsa

        printf "%s %s %s %s %s\n" "STDOUT" "${METHOD_NAME}" "${0}" "${LINENO}" "Keypairs created." >&1;
    fi

    [ ${ERROR_COUNT} -ne 0 ] && typeset -i RETURN_CODE=${ERROR_COUNT} || typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}" >&2;
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit" >&2;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS" >&2;
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && printf "%s %s %s %s %s\n" "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")" >&2;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    typeset -x IFS="${CURR_IFS}";

    [ ${ERROR_COUNT} -ne 0 ] && typeset -i ERROR_COUNT=0;

    [ ! -z "${DIRECTORY_NAME}" ] && unset -v DIRECTORY_NAME;
    [ ! -z "${DOTFILES_HOME}" ] && unset -v DOTFILES_HOME;
    [ ! -z "${INSTALL_YAML}" ] && unset -v INSTALL_YAML;
    [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
    [ ! -z "${DIRECTORY_ENTRY}" ] && unset -v DIRECTORY_ENTRY;
    [ ! -z "${LINKED_ENTRY}" ] && unset -v LINKED_ENTRY;
    [ ! -z "${LINK_TARGET}" ] && unset -v LINK_TARGET;
    [ ! -z "${LINK_SOURCE}" ] && unset -v LINK_SOURCE;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;

    return ${RETURN_CODE};
}

cd "${BASEDIR}"
/usr/bin/env git submodule update --init --recursive "${DOTBOT_DIR}" 2>/dev/null;
typeset -i RET_CODE=${?};

if [ ! -z "${RET_CODE}" -a ${RET_CODE} -eq 0 ]
then
    ## try this first. it'll either work or it won't.
    echo "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN} -d ${BASEDIR} -c ${CONFIG} ${@}"
    "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}" > /dev/null 2>&1;
    typeset -i RET_CODE=${?};

    if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
    then
        printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Dotbot installation failed. Possible problem with Python libraries. Processing manual installation." >&2;

        ## make the call
        installFiles 1>${HOME}/.log/installFiles.out 2>${HOME}/.log/installFiles.err;
        typeset -i RET_CODE=${?};

        if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
        then
            printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "One or more processes failed during manual installation. Please review logs." >&2;
        fi
    fi
else
    printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Dotbot installation failed. Possible problem with Python libraries. Processing manual installation.";

    ## make the call
    installFiles 1>${HOME}/installFiles.out 2>${HOME}/installFiles.err;
    typeset -i RET_CODE=${?};

    if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
    then
        printf "%s %s %s %s %s\n" "STDERR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "One or more processes failed during manual installation. Please review logs." >&2;
    fi
fi
